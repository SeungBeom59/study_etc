<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<context:component-scan base-package="polymorphism"></context:component-scan>
	
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<context:property-placeholder location="classpath:config/database.properties"/>

<!--	<bean id="todoService" class="com.example.service.TodoServiceImpl">-->
<!--		&lt;!&ndash; 의존성을 주입할 생성자 지정 &ndash;&gt;-->
<!--		<constructor-arg ref="todoMapper"/>-->
<!--		<constructor-arg ref="modelMapper"/>-->
<!--	</bean>-->

<!--	<bean id="todoMapper" class="com.example.mapper.TodoMapper"/>-->
<!--	<bean id="modelMapper" class="org.modelmapper.ModelMapper"/>-->
	
	<!-- DB - DataSource 설정 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- MyBatis SqlSessionFactoryBean 등록 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sql-map-config.xml"></property>
	</bean>
	
	<!-- Spring과 Mybatis 연동 설정 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sql-map-config.xml"></property>
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*(..))" />
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- <bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean> -->
	
<!-- 	<bean id="beforeLog" class="com.springbook.biz.common.BeforeAdvice"></bean>-->
<!--	<bean id="afterReturing" class="com.springbook.biz.common.AfterReturningAdvice"></bean>-->
<!--	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThowingAdvice"></bean>-->
<!--	<bean id="after" class="com.springbook.biz.common.AfterAdvice"></bean>-->
<!--	<bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean> -->

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
<!-- 	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj"/>
		</aop:aspect> 
		
		<aop:aspect ref="afterReturing">
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj"/>
		</aop:aspect>
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="getPointcut" method="aroundLog"/>
		</aop:aspect>
		
	</aop:config> -->
	
	
	
<!-- 	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		ref로 bean으로 등록된 이름인 userDAO 객체를 넣어준다.
		<property name="userDAO" ref="userDAO"></property>
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"></bean> -->
	
	
	
	<!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000"></bean>
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean> -->
	
	<!-- <bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<props>
				<prop key="고길동">서울시 강남구 역삼동</prop>
				<prop key="마이콜">서울시 강서구 화곡동</prop>
			</props>
		</property>
	</bean> -->

</beans>
